version: '3'

networks:
  nextcloudnet:
  web:
    external:
      name: traefikv2

services:
  db:
    image: mariadb
    restart: always
    volumes:
      - ${NEXTCLOUD_DATA_ROOT}/database:/var/lib/mysql
    environment:
      # from doppler-cli service
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - nextcloudnet

  nextcloud:
    image: nextcloud:production-apache
    container_name: nextcloud
    hostname: ${SERVICE_DOMAIN}
    restart:
      always
      # Ports MUST NOT be forwarded in production,
      # because reverse proxy can connect to them on port 80 on the internal network
      # and port 80 is already occupied by the reverse proxy
    #    ports:
    # Host:Container
    #      - "80:80"
    volumes:
      - ${NEXTCLOUD_DATA_ROOT}/main:/var/www/html
      - ${NEXTCLOUD_DATA_ROOT}/files:/var/www/html/data
    # maybe this link can be omitted due to docker-compose default network
    links:
      - db
    environment:
      # All settings will be filled by doppler-cli
      # Nextcloud Settings
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      # the 'nextcloud' trusted domain allows the cron job
      # to call cron.php from inside the docker-compose system
      NEXTCLOUD_TRUSTED_DOMAINS: https://${SERVICE_DOMAIN} http://${SERVICE_DOMAIN} nextcloud
      OVERWRITEHOST: ${SERVICE_DOMAIN}
      OVERWRITEPROTOCOL: 'https'
      # DB Settings
      MYSQL_HOST: db
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - nextcloudnet
      - web
    labels:
      # Traefik V2 Config
      - 'traefik.enable=true'
      - 'traefik.docker.network=traefikv2'
      - 'traefik.http.routers.nextcloud.rule=Host(`${SERVICE_DOMAIN}`)'
      - 'traefik.http.routers.nextcloud.service=nextcloud@docker'
      - 'traefik.http.services.nextcloud.loadbalancer.server.port=80'
      - 'traefik.http.routers.nextcloud.tls=true'
      - 'traefik.http.routers.nextcloud.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.nextcloud.tls.domains[0].main=${SERVICE_DOMAIN}'
      # For service discovery behind traefik: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/reverse_proxy_configuration.html#service-discovery
      # Create a middleware named `nextcloud-redirects`
      - 'traefik.http.middlewares.nextcloud-redirects.redirectRegex.permanent=true'
      - 'traefik.http.middlewares.nextcloud-redirects.redirectRegex.regex=https://(.*)/.well-known/(card|cal)dav'
      - 'traefik.http.middlewares.nextcloud-redirects.redirectRegex.replacement=https://$${1}/remote.php/dav/' # avoid interpolation by docker compose with double $ sign
      # Apply the middleware named `nextcloud-redirects` to the router named `nextcloud`
      - 'traefik.http.routers.nextcloud.middlewares=nextcloud-redirects@docker'

  cron:
    image: nextcloud:production-apache
    restart: always
    networks:
      - nextcloudnet
    volumes:
      - ${NEXTCLOUD_DATA_ROOT}/main:/var/www/html
      - ${NEXTCLOUD_DATA_ROOT}/files:/var/www/html/data
    entrypoint: /cron.sh
    depends_on:
      - db

  backup-s3-sync:
    # https://github.com/futurevision/docker-aws-s3-sync
    image: futurevision/aws-s3-sync
    restart: always
    volumes:
      - ${NEXTCLOUD_DATA_ROOT}:/data:rw
    environment:
      KEY: '${AWS_ACCESS_KEY_ID}'
      SECRET: '${AWS_ACCESS_KEY_SECRET}'
      REGION: eu-central-1
      BUCKET: jb-vserv-backups
      BUCKET_PATH: /${SERVICE_DOMAIN}
      # sync each day at 02:30 - good, because backups will be made daily (at 02:00, defined by default crontab for alpine root user as 0   2   *   *   *)
      # docs from: https://firefart.at/post/docker_and_cron_jobs/
      CRON_SCHEDULE: '30 2 * * *'
