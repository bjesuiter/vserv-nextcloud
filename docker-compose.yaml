version: '3'

volumes:
  main:
  files:
  db:

networks:
  nextcloudnet:
  web:
    external:
      name: web

services:

  db:
    image: mariadb
    restart: always
    volumes:
      - db:/var/lib/mysql
    environment:
      # from env files
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - nextcloudnet

  nextcloud:
    image: nextcloud:15
    restart: always
      # Ports MUST NOT be forwarded in production,
      # because reverse proxy can connect to them on port 80 on the internal network
      # and port 80 is already occupied by the reverse proxy
#    ports:
      # Host:Container
#      - "80:80"
    volumes:
      - main:/var/www/html
      - files:/var/www/html/data
    # maybe this link can be omitted due to docker-compose default network
    links:
      - db
    environment:
      # Nextcloud Settings
      NEXTCLOUD_ADMIN_USER: ${NEXTCLOUD_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${NEXTCLOUD_ADMIN_PASSWORD}
      # the 'nextcloud' trusted domain allows the cron job
      # to call cron.php from inside the docker-compose system
      NEXTCLOUD_TRUSTED_DOMAINS: ${SERVICE_DOMAIN} nextcloud
      # DB Settings
      MYSQL_HOST: db
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - nextcloudnet
      - web
    labels:
      # Traefik Config
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:${SERVICE_DOMAIN}" # multiple host-aliases with multiple host rules?
      - "traefik.port=80"
      - "traefik.protocol=http"

  cron:
    image: nextcloud:15
    restart: always
    networks:
      - nextcloudnet
    volumes:
      - main:/var/www/html
      - files:/var/www/html/data
    entrypoint: /cron.sh
    depends_on:
      - db
