# TOML Documentation: https://github.com/toml-lang/toml
# Original Blogpost: https://dev.to/arctic_hen7/an-alternative-to-npm-and-yarn-scripts-bonnie-2idd
# How to use bonnie: https://github.com/arctic-hen7/bonnie/wiki


# run these scripts with bonnie in your path, 
# for example: bonnie start

# NOTE: These scripts may use the new `docker compose` (without a dash) command
# See: https://docs.docker.com/compose/cli-command/ 
# And: https://docs.docker.com/compose/cli-command-compatibility/

# Mandatory from 0.2.0 onwards
version = "0.3.2"

[scripts]
    # [Internal] Main compose alias to ensure, that doppler-run will be executed with each compose command
    compose = "doppler run -- docker-compose %%"
    # [Internal] - more base commands
    git-pull       = "git pull --ff"
    docker-pull    = "bonnie compose pull"
    docker-cleanup = "docker image prune"
    build-cron     = "bonnie compose build backup-cron"

    # Maintenance Scripts 
    # open-doppler only works on macos
    open-doppler  = "open https://dashboard.doppler.com/workplace/f867183ebfa5d4d1e007/projects/vserv-nextcloud"
    restic        = "doppler run -- restic %%"
    doppler-debug = "doppler run -- printenv POSTGRES_USER"

    # first setup - let db initialize, then stop it and run `bonnie start-logs`
    first-init = "bonnie compose up db"

    # everyday scripts
    start      = "bonnie compose up --remove-orphans -d"
    stop       = "bonnie compose down"
    logs       = "bonnie compose logs -f -t %%"
    backup-now = "bonnie backup-daily"

    start-logs = ["bonnie start", "bonnie logs"]
    restart = ["bonnie stop", "bonnie start"]
    restart-logs = ["bonnie stop", "bonnie start-logs"]
    update = [
        "bonnie stop",
        "bonnie git-pull",
        "bonnie docker-pull",
        "bonnie build-cron",
        "bonnie start-logs",
    ]


    # Per Container Scripts - Nextcloud 
    logs-nxt             = "bonnie logs nextcloud"
    shell-nxt            = "bonnie compose exec nextcloud bash"
    shell-nxt-www        = "bonnie compose exec -u www-data nextcloud bash"
    occ                  = "bonnie compose exec -u www-data nextcloud ./occ %%"
    occ-logs             = "bonnie occ log:tail"
    occ-logs-watch       = "bonnie occ log:watch"
    occ-upgrade          = "bonnie occ upgrade"
    occ-maintenance-off  = "bonnie occ maintenance:mode --off"
    occ-maintenance-on   = "bonnie occ maintenance:mode --on"
    occ-files-scan       = "bonnie occ files:scan --all"
    occ-files-cleanup    = "bonnie occ files:cleanup"
    occ-trashbin-cleanup = "bonnie occ trashbin:cleanup --all-users"
    # Test env availability via bonnie compose exec db printenv POSTGRES_USER
    # TODO: Find out why this shit is not working! 
    # Last Try: bonnie compose exec db bash -c 'psql -U nextcloud -d nextcloud -c \"SELECT * FROM oc_file_locks WHERE 1\"' 
    # Also not working
    # TODO: Fix Lock Problem
    db-read-locks    = "bonnie compose exec db bash -c 'psql -U $POSTGRES_USER -d POSTGRES_DB -c \"SELECT * FROM oc_file_locks WHERE 1\"'"
    db-release-locks = "bonnie compose exec db psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -c 'DELETE FROM oc_file_locks WHERE 1'"

    # Per Container Scripts - db
    logs-db = "bonnie logs db"

    # Per Container Scripts - backup-cron
    logs-backup  = "bonnie logs backup-cron"
    shell-backup = "bonnie compose exec backup-cron sh"
    logs-cron    = "bonnie compose exec backup-cron grep CRON /var/log/syslog"
    backup-db    = "bonnie compose run backup-cron /etc/scripts/backup-postgres-db"
    backup-nxt   = "bonnie compose run backup-cron /etc/scripts/backup-nextcloud-config"
    backup-daily = "bonnie compose run backup-cron /etc/periodic/daily/backup-daily"
